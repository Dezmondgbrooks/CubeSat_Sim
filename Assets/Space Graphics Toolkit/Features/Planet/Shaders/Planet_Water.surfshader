BEGIN_SUBSHADERS
	"Planet_Common.surfshader"
END_SUBSHADERS

BEGIN_PROPERTIES
	[Header(WATER)]
	[Toggle(_WATER)] _HasWater ("	Enabled", Float) = 0

	_WaterTiling("	Tiling", Float) = 10
	[HideInInspector][NoScaleOffset][Normal]_WaterTexture("	Texture (RG + BA)", 2D) = "bump" {}
	_WaterNoiseTiling("	Noise Tiling", Float) = 1.0
	_WaterNoiseStrength("	Noise Strength", Float) = 1.0
	_WaterMetallic("	Metallic", Range(0,1)) = 0
	_WaterSmoothness("	Smoothness", Range(0,1)) = 1
	_WaterEmission("	Emission", Range(0,1)) = 0
	_WaterSharpness("	Coast Sharpness", Float) = 10
END_PROPERTIES

BEGIN_DEFINES
   #pragma shader_feature_local _ _WATER
END_DEFINES

BEGIN_CBUFFER
	float _WaterTiling;
	float _WaterLevel;
	float _WaterGradientScale;
	float _WaterSharpness;
	float _WaterNoiseTiling;
	float _WaterNoiseStrength;
	float _WaterMetallic;
	float _WaterSmoothness;
	float _WaterEmission;
END_CBUFFER

BEGIN_CODE
	TEXTURE2D(_HeightMap);
	SAMPLER(sampler_HeightMap);

	TEXTURE2D(_WaterGradient);
	SAMPLER(sampler_WaterGradient);
	sampler2D _WaterTexture;

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
	#if _WATER||true
		float2 coord    = d.extraV2F1.xy;
		float  polar    = d.extraV2F1.z;

		float4 heightMap  = SAMPLE_TEXTURE2D(_HeightMap, sampler_HeightMap, coord);
		float  water      = _WaterLevel - heightMap.a;
		float4 waterCoord = d.extraV2F0 * _WaterTiling;

		//water += (sample2(_WaterLevelMap, waterCoord, polar).a - 0.5f) * _WaterLevelScale;

		float  waterDensity = saturate(water * _WaterSharpness);
		float  waterColor   = saturate(water * _WaterGradientScale);
		float4 waterAlbedo  = SAMPLE_TEXTURE2D(_WaterGradient, sampler_WaterGradient, float2(waterColor, waterColor));

		float  noise       = tex3D(_NoiseTex, d.localSpaceNormal * _WaterNoiseTiling * _WaterTiling).r * _WaterNoiseStrength;
		float4 waterPix    = sample_spherical(_WaterTexture, waterCoord, polar + noise, _WaterTiling);
		float3 waterNormal = UnpackNormal(waterPix);

		o.Albedo     = lerp(o.Albedo, waterAlbedo, waterDensity);
		o.Metallic   = lerp(o.Metallic, _WaterMetallic, waterDensity);
		o.Smoothness = lerp(o.Smoothness, _WaterSmoothness, waterDensity);
		o.Emission   = lerp(o.Emission, waterAlbedo, _WaterEmission * waterDensity);
		o.Normal     = normalize(lerp(o.Normal, waterNormal, waterDensity));
	#endif
	}
END_CODE